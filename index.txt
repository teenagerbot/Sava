const http = require("http");
const cookieManager = require('cookie-parser');
const path = require('path');
const express = require('express');
// const nedb = require('nedb');
const app = express();
const sockets = require('socket.io');
const fs = require("fs");
const server = http.createServer(app);
const { Databases } = require("esosdb");
const DBtovs = new Databases({
  path: "./db/tovars.json",
  space: 2
});
const DataBase = new Databases({
  path: "./db/db.json",
  space: 2
});
// const DataBase = new nedb({ filename: './db/db.json', autoload: true });
// const DBtovs = new nedb({ filename: './db/tovars.json', autoload: true });
  // var doc = [
  //   {
  //     user: "Володя",
  //     tel: "0987643210",
  //     tovars: [
  //       "Мокасини", "берці", "чоботи", "кросівки зимові", "кросівки літні"
  //     ]
  //   },
  //   {
  //     user: "Володя",
  //     tel: "0987643298",
  //     tovars: [
  //       "Мокасини"
  //     ]
  //   }
  // ]
// var doc = [
//   {
//     t: "Кроссівки літні",
//     c: "літо",
//     d: "Міцні",
//     p: "708.50",
//     i: "./public/images/1.png"
//   },
//   {
//     t: "Кроссівки зимові",
//     c: "зима",
//     d: "Міцні",
//     p: "1200.00",
//     i: "./public/images/2.png"
//   },
//   {
//     t: "Кроссівки осінні",
//     c: "осінь",
//     d: "Міцні",
//     p: "1250.00",
//     i: "./public/images/3.png"
//   }
// ]

  //     DBtovs.insert(doc, function (err, newDoc) {   // Callback is optional
  //   // newDoc is the newly inserted document, including its _id
  //   // newDoc has no key called notToBeSaved since its value was undefined
  //     // console.log(newDoc._id)
  //     //   DataBase.find({ user: "Володя" }, function (err, docs) {
  //     //   // docs is an array containing documents Mars, Earth, Jupiter
  //     //   // If no document is found, docs is equal to []
  //     //     console.log(docs);
  //     // });
  // });
const io = sockets(server, {
  cors: {
    origin: "*",
    methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"]
  },
  maxHttpBufferSize: 1e8 // = 100 MB, 500 MB = 5e8 for transmiting files
});
app.disable("x-powered-by");
app.use(express.static('public'));
io.on('connection', (socket) => {
  let count = 32;
  if (count > 99999 && count < 999999) {
    count = `${String(count).slice(0, 3)} тис.`
  } else if (count > 999999 && count < 999999999) {
    count = `${String(count).slice(0, 3)} млн.`
  } else if (count < 99999) {
    count = count;
  } else {
    count = "більше мільйона";
  }
  socket.on("loadUsers", () => {
    io.to(socket.id).emit("content", DataBase.getAll());
  });
  socket.on("newOrder", (data) => {
    let datas = DataBase.getAll();
    datas.push({
      "user": data.name,
      "tel": data.tel,
      "tovars": data.tovvs
    });
    fs.writeFileSync("./db/db.json", JSON.stringify(datas, null, 2))
    io.to(socket.id).emit("OrderS");
    io.emit("orderSAdmin", datas)
    // DataBase.push({
    //   "user": data.name,
    //   "tel": data.tel,
    //   "tovars": data.tovvs
    // }, function (err, newDoc) {
    //   io.to(socket.id).emit("OrderS");
    //   io.emit("orderSAdmin", newDoc)
    // });
  })
  socket.on("getPerms", () => {
    io.to(socket.id).emit("setPerms", fs.readFileSync("./activators.json", "utf8"));
  })
  socket.on("loadProds", () => {
        io.to(socket.id).emit("prods", DBtovs.getAll());
    });
  });
  socket.on("delUser", iid => {
      DataBase.remove({ _id: String(iid) }, {}, function (err, numRemoved) {
      if (err) {

      } else {
        DataBase.find({}, function (err, docs) {
            io.to(socket.id).emit("content", docs);
        });
      }
    });
  })
});
server.listen(3000, "0.0.0.0", function() {
  console.log('listening on 3000');
});
//https://codepen.io/sdras/pen/GOBGjg